version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: alpha-tower-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_HML_DATABASE:-alpha_tower}
      POSTGRES_USER: ${DB_HML_USERNAME:-alpha_user}
      POSTGRES_PASSWORD: ${DB_HML_PASSWORD:-alpha_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_HML_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - alpha-tower-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_HML_USERNAME:-alpha_user} -d ${DB_HML_DATABASE:-alpha_tower}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: alpha-tower-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASS:-redis_secure_password}"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - alpha-tower-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: alpha-tower-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      APP_NAME: ${APP_NAME:-alpha-tower}
      APP_ENV: ${APP_ENV:-development}
      APP_SECRET: ${APP_SECRET:-your_app_secret_key_here}
      APP_WEB_URL: ${APP_WEB_URL:-3000}
      SERVER_PORT: ${SERVER_PORT:-3333}

      TYPEORM_CONNECTION: postgres
      TYPEORM_HOST: postgres
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: ${DB_HML_USERNAME:-alpha_user}
      TYPEORM_PASSWORD: ${DB_HML_PASSWORD:-alpha_secure_password}
      TYPEORM_DATABASE: ${DB_HML_DATABASE:-alpha_tower}
      TYPEORM_SYNCHRONIZE: false
      TYPEORM_LOGGING: true
      TYPEORM_ENTITIES: src/modules/**/database/entities/*.ts
      TYPEORM_MIGRATIONS: src/database/migrations/*.ts
      TYPEORM_MIGRATIONS_DIR: src/database/migrations

      DB_HML_HOST: postgres
      DB_HML_PORT: 5432
      DB_HML_DATABASE: ${DB_HML_DATABASE:-alpha_tower}
      DB_HML_USERNAME: ${DB_HML_USERNAME:-alpha_user}
      DB_HML_PASSWORD: ${DB_HML_PASSWORD:-alpha_secure_password}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASS: ${REDIS_PASS:-redis_secure_password}

      TOKEN_SECRET: ${TOKEN_SECRET:-your_jwt_secret_key_here}
      TOKEN_EXPIRATION: ${TOKEN_EXPIRATION:-1d}

      STORAGE_DRIVER: ${STORAGE_DRIVER:-disk}
      UPLOAD_PATH: /app/uploads

      MAIL_DRIVER: ${MAIL_DRIVER:-ethereal}

      AWS_REGION: ${AWS_REGION:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    ports:
      - "${SERVER_PORT:-3333}:3333"
    volumes:
      - .:/app
      - /app/node_modules
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    working_dir: /app
    networks:
      - alpha-tower-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: yarn localhost

  api-production:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: alpha-tower-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      APP_NAME: ${APP_NAME:-alpha-tower}
      APP_ENV: production
      APP_SECRET: ${APP_SECRET:-your_app_secret_key_here}
      SERVER_PORT: 3333

      TYPEORM_CONNECTION: postgres
      TYPEORM_HOST: postgres
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: ${DB_PRD_USERNAME:-alpha_user}
      TYPEORM_PASSWORD: ${DB_PRD_PASSWORD:-alpha_secure_password}
      TYPEORM_DATABASE: ${DB_PRD_DATABASE:-alpha_tower_prod}
      TYPEORM_SYNCHRONIZE: false
      TYPEORM_LOGGING: false
      TYPEORM_ENTITIES: build/modules/**/database/entities/*.js
      TYPEORM_MIGRATIONS: build/database/migrations/*.js
      TYPEORM_MIGRATIONS_RUN: true

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASS: ${REDIS_PASS:-redis_secure_password}

      TOKEN_SECRET: ${TOKEN_SECRET:-your_jwt_secret_key_here}
      TOKEN_EXPIRATION: ${TOKEN_EXPIRATION:-24h}

      STORAGE_DRIVER: ${STORAGE_DRIVER:-disk}
      UPLOAD_PATH: /app/uploads
    ports:
      - "3333:3333"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - alpha-tower-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - production

  nginx:
    image: nginx:alpine
    container_name: alpha-tower-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    networks:
      - alpha-tower-network
    depends_on:
      - api-production
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
    name: alpha_tower_postgres_data
  redis_data:
    driver: local
    name: alpha_tower_redis_data
  uploads_data:
    driver: local
    name: alpha_tower_uploads
  logs_data:
    driver: local
    name: alpha_tower_logs

networks:
  alpha-tower-network:
    driver: bridge
    name: alpha-tower-network